#!/bin/bash

# EasyEngine update script.
# This script is designed to install latest EasyEngine or
# to update current EasyEngine from 2.x to 3.x

# Checking permissions
if [[ $EUID -ne 0 ]]; then
    ee_lib_echo_fail "Sudo privilege required..."
    ee_lib_echo_fail "Uses: wget -qO ee rt.cx/ee && sudo bash ee"
    exit 100
fi

# Define echo function
# Blue color
function ee_lib_echo()
{
    echo $(tput setaf 4)$@$(tput sgr0)
}
# White color
function ee_lib_echo_info()
{
    echo $(tput setaf 7)$@$(tput sgr0)
}
# Red color
function ee_lib_echo_fail()
{
    echo $(tput setaf 1)$@$(tput sgr0)
}

# Capture errors
function ee_lib_error()
{
    echo "[ `date` ] $(tput setaf 1)$@$(tput sgr0)"
    exit $2
}

# Execute: apt-get update
ee_lib_echo "Executing apt-get update, please wait..."
apt-get update &>> /dev/null

# Checking lsb_release package
if [ ! -x /usr/bin/lsb_release ]; then
    ee_lib_echo "Installing lsb-release, please wait..."
    apt-get -y install lsb-release &>> /dev/null
fi

# Define variables for later use
ee_branch=$1
readonly ee_version_old="2.2.3"
readonly ee_version_new="3.1.0"
readonly ee_log_dir=/var/log/ee/
readonly ee_install_log=/var/log/ee/install.log
readonly ee_linux_distro=$(lsb_release -i | awk '{print $3}')
readonly ee_debian_version=$(lsb_release -sc)

# Checking linux distro
if [ "$ee_linux_distro" != "Ubuntu" ] && [ "$ee_linux_distro" != "Debian" ]; then
    ee_lib_echo_fail "EasyEngine (ee) is made for Ubuntu and Debian only as of now"
    ee_lib_echo_fail "You are free to fork EasyEngine (ee): https://github.com/rtCamp/easyengine/fork"
    ee_lib_echo_fail "EasyEngine (ee) only support Ubuntu 12.04/14.04 and Debian 7.x"
    exit 100
fi

# EasyEngine (ee) only support all Ubuntu/Debian distro except the distro reached EOL
lsb_release -d | egrep -e "12.04|14.04|wheezy" &>> /dev/null
if [ "$?" -ne "0" ]; then
    ee_lib_echo_fail "EasyEngine (ee) only support Ubuntu 12.04/14.04 and Debian 7.x"
    exit 100
fi

# Pre checks to avoid later screw ups
# Checking EasyEngine (ee) log directory
if [ ! -d $ee_log_dir ]; then

    ee_lib_echo "Creating EasyEngine log directory, please wait..."
    mkdir -p $ee_log_dir || ee_lib_error "Unable to create log directory $ee_log_dir, exit status " $?

    # Create EasyEngine log files
    touch /var/log/ee/{ee.log,install.log}

    # Keep EasyEngine log folder accessible to root only
    chmod -R 700 /var/log/ee || ee_lib_error "Unable to change permissions for EasyEngine log folder, exit status " $?
fi

# Install Python3, Git, Tar and python-software-properties required packages
# Generate Locale
function ee_install_dep()
{
    ee_lib_echo "Installing required packages, please wait..."
    if [ "$ee_linux_distro" == "Ubuntu" ]; then
        apt-get -y install gcc curl gzip python3 python3-apt python3-setuptools python3-dev sqlite3 git tar python-software-properties software-properties-common || ee_lib_error "Unable to install pre depedencies, exit status " 1
    elif [ "$ee_linux_distro" == "Debian" ]; then
        apt-get -y install gcc curl gzip python3 python3-apt python3-setuptools python3-dev sqlite3 git tar python-software-properties || ee_lib_error "Unable to pre depedencies, exit status " 1
    fi

    # Generating Locale
    locale-gen en &>> /dev/null
}

# Sqlite query to create table `sites` into ee.db
# which will be used by EasyEngine 3.x
function ee_sync_db()
{
    if [ ! -f /var/lib/ee/ee.db ]; then
        mkdir -p /var/lib/ee

        echo "CREATE TABLE sites (
           id INTEGER PRIMARY KEY     AUTOINCREMENT,
           sitename UNIQUE,
           site_type CHAR,
           cache_type CHAR,
           site_path  CHAR,
           created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
           is_enabled INT,
           is_ssl INT,
           storage_fs CHAR,
           storage_db CHAR,
           db_name VARCHAR,
           db_user VARCHAR,
           db_password VARCHAR,
           db_host VARCHAR,
           is_hhvm INT INT DEFAULT '0',
           is_pagespeed INT INT DEFAULT '0'
        );" | sqlite3 /var/lib/ee/ee.db

        # Check site is enable/live or disable
        for site in $(ls /etc/nginx/sites-available/ | grep -v default);
        do
        if [ -f /etc/nginx/sites-enabled/$site ]; then
            ee_site_status='1'
        else
            ee_site_status='0'
        fi

        # Find out information about current NGINX configuration
        ee_site_current_type=$(head -n1 /etc/nginx/sites-available/$site | grep "NGINX CONFIGURATION" | rev | cut -d' ' -f3,4,5,6,7 | rev | cut -d ' ' -f2,3,4,5)

        # Detect current website type and cache
        if [ "$ee_site_current_type" = "HTML" ]; then
            ee_site_current="html"
            ee_site_current_cache="basic"
        elif [ "$ee_site_current_type" = "PHP" ]; then
            ee_site_current="php"
            ee_site_current_cache="basic"
        elif [ "$ee_site_current_type" = "MYSQL" ]; then
            ee_site_current="mysql"
            ee_site_current_cache="basic"
        # Single WordPress
        elif [ "$ee_site_current_type" = "WPSINGLE BASIC" ]; then
            ee_site_current="wp"
            ee_site_current_cache="basic"

        elif [ "$ee_site_current_type" = "WPSINGLE WP SUPER CACHE" ]; then
            ee_site_current="wp"
            ee_site_current_cache="wpsc"

        elif [ "$ee_site_current_type" = "WPSINGLE W3 TOTAL CACHE" ]; then
            ee_site_current="wp"
            ee_site_current_cache="w3tc"

        elif [ "$ee_site_current_type" = "WPSINGLE FAST CGI" ] || [ "$ee_site_current_type" = "WPSINGLE FASTCGI" ]; then
            ee_site_current="wp"
            ee_site_current_cache="wpfc"

        # WordPress subdirectory
        elif [ "$ee_site_current_type" = "WPSUBDIR BASIC" ]; then
            ee_site_current="wpsubdir"
            ee_site_current_cache="basic"

        elif [ "$ee_site_current_type" = "WPSUBDIR WP SUPER CACHE" ]; then
            ee_site_current="wpsubdir"
            ee_site_current_cache="wpsc"

        elif [ "$ee_site_current_type" = "WPSUBDIR W3 TOTAL CACHE" ]; then
            ee_site_current="wpsubdir"
            ee_site_current_cache="w3tc"

        elif [ "$ee_site_current_type" = "WPSUBDIR FAST CGI" ] || [ "$ee_site_current_type" = "WPSUBDIR FASTCGI" ]; then
            ee_site_current="wpsubdir"
            ee_site_current_cache="wpfc"

        # WordPress subdomain
        elif [ "$ee_site_current_type" = "WPSUBDOMAIN BASIC" ]; then
            ee_site_current="wpsubdomain"
            ee_site_current_cache="basic"

        elif [ "$ee_site_current_type" = "WPSUBDOMAIN WP SUPER CACHE" ]; then
            ee_site_current="wpsubdomain"
            ee_site_current_cache="wpsc"

        elif [ "$ee_site_current_type" = "WPSUBDOMAIN W3 TOTAL CACHE" ]; then
            ee_site_current="wpsubdomain"
            ee_site_current_cache="w3tc"

        elif [ "$ee_site_current_type" = "WPSUBDOMAIN FAST CGI" ] || [ "$ee_site_current_type" = "WPSUBDOMAIN FASTCGI" ]; then
            ee_site_current="wpsubdomain"
            ee_site_current_cache="wpfc"
        fi

        ee_webroot="/var/www/$site"

        # Insert query to insert old site information into ee.db
        echo "INSERT INTO sites (sitename, site_type, cache_type, site_path, is_enabled, is_ssl, storage_fs, storage_db)
        VALUES (\"$site\", \"$ee_site_current\", \"$ee_site_current_cache\", \"$ee_webroot\", \"$ee_site_status\", 0, 'ext4', 'mysql');" | sqlite3 /var/lib/ee/ee.db

        done
    else
        ee_lib_echo "Updating EasyEngine Database"
        echo "ALTER TABLE sites ADD COLUMN db_name varchar;" | sqlite3 /var/lib/ee/ee.db
        echo "ALTER TABLE sites ADD COLUMN db_user varchar; " | sqlite3 /var/lib/ee/ee.db
        echo "ALTER TABLE sites ADD COLUMN db_password varchar;" | sqlite3 /var/lib/ee/ee.db
        echo "ALTER TABLE sites ADD COLUMN db_host varchar;" | sqlite3 /var/lib/ee/ee.db
        echo "ALTER TABLE sites ADD COLUMN is_hhvm INT DEFAULT '0';" | sqlite3 /var/lib/ee/ee.db
        echo "ALTER TABLE sites ADD COLUMN is_pagespeed INT DEFAULT '0';" | sqlite3 /var/lib/ee/ee.db
    fi
}

function secure_ee_db()
{
    chown -R root:root /var/lib/ee/
    chmod -R 600 /var/lib/ee/
}

# Install EasyEngine 3.x
function ee_install()
{
    # Remove old clone of EasyEngine (ee) if any
    rm -rf /tmp/easyengine &>> /dev/null

    # Clone EE 3.0 Python ee_branch
    ee_lib_echo "Cloning EasyEngine, please wait..."
    if [ "$ee_branch" = "" ]; then
        ee_branch=stable
    fi

    git clone -b $ee_branch https://github.com/rtCamp/easyengine.git /tmp/easyengine --quiet > /dev/null \
    || ee_lib_error "Unable to clone EasyEngine, exit status" $?

    cd /tmp/easyengine
    ee_lib_echo "Installing EasyEngine, please wait..."
    python3 setup.py install || ee_lib_error "Unable to install EasyEngine, exit status " $?
}

# Update EasyEngine configuration
# Remove EasyEngine 2.x
function ee_update()
{
    # Preserve old configuration
    ee_lib_echo "Updating EasyEngine configuration, please wait..."

    if [ -f /etc/nginx/nginx.conf ]; then
        sed -i "s/X-Powered-By.*/X-Powered-By \"EasyEngine $ee_version_new\";/" /etc/nginx/nginx.conf &>> /dev/null
    fi

    ee_grant_host=$(grep grant-host /etc/easyengine/ee.conf | awk '{ print $3 }' | head -1 )
    ee_db_name=$(grep db-name /etc/easyengine/ee.conf | awk '{ print $3 }')
    ee_db_user=$(grep db-name /etc/easyengine/ee.conf | awk '{ print $3 }')
    ee_wp_prefix=$(grep prefix /etc/easyengine/ee.conf | awk '{ print $3 }')
    ee_wp_user=$(grep 'user ' /etc/easyengine/ee.conf | grep -v db-user |awk '{ print $3 }')
    ee_wp_pass=$(grep password /etc/easyengine/ee.conf | awk '{ print $3 }')
    ee_wp_email=$(grep email /etc/easyengine/ee.conf | awk '{ print $3 }')
    ee_ip_addr=$(grep ip-address /etc/easyengine/ee.conf |awk -F'=' '{ print $2 }')

    sed -i "s/ip-address.*/ip-address = ${ee_ip_addr}/" /etc/ee/ee.conf && \
    sed -i "s/grant-host.*/grant-host = ${ee_grant_host}/" /etc/ee/ee.conf && \
    sed -i "s/db-name.*/db-name = ${db-name}/" /etc/ee/ee.conf && \
    sed -i "s/db-user.*/db-user = ${ee_db_user}/" /etc/ee/ee.conf && \
    sed -i "s/prefix.*/prefix = ${ee_wp_prefix}/" /etc/ee/ee.conf && \
    sed -i "s/^user.*/user = ${ee_wp_user}/" /etc/ee/ee.conf && \
    sed -i "s/password.*/password = ${ee_wp_password}/" /etc/ee/ee.conf && \
    sed -i "s/email.*/email = ${ee_wp_email}/" /etc/ee/ee.conf || ee_lib_error "Unable to update configuration, exit status " $?


    # Remove old EasyEngine
    ee_lib_echo "Removing EasyEngine 2.x"
    rm -rf /etc/bash_completion.d/ee /etc/easyengine/ /usr/share/easyengine/ /usr/local/lib/easyengine /usr/local/sbin/easyengine /usr/local/sbin/ee /var/log/easyengine

    # Softlink to fix command not found error
    ln -s /usr/local/bin/ee /usr/local/sbin/ee || ee_lib_error "Unable to create softlink to old EasyEngine, exit status " $?
}

function ee_update_latest()
{
    ee_lib_echo "Updating Nginx configuration, please wait..."
    if [ -f /etc/nginx/ee-nginx.conf ]; then
        sed -i "s/X-Powered-By.*/X-Powered-By \"EasyEngine $ee_version_new\";/" /etc/nginx/nginx.conf &>> /dev/null
    elif [ -f /etc/nginx/nginx.conf ]; then
        sed -i "s/X-Powered-By.*/X-Powered-By \"EasyEngine $ee_version_new\";/" /etc/nginx/nginx.conf &>> /dev/null
    fi

    # Disable Xdebug on old systems if and only if ee debug is off
    if [ -f /etc/php5/mods-available/xdebug.ini ]; then
        ee_debug_value=$(grep -Hr 9001 /etc/nginx/conf.d/upstream.conf | wc -l )
        if [ $ee_debug_value -eq 1 ]; then
            grep -Hr ";zend_extension" /etc/php5/mods-available/xdebug.ini &>> /dev/null
            if [ $? -ne 0 ]; then
                sed -i "s/zend_extension/;zend_extension/" /etc/php5/mods-available/xdebug.ini
            fi
        fi
    fi
}

# Do git intialisation
function ee_git_init()
{
    # Nginx under git version control
    if [ -d /etc/nginx ];then
        cd /etc/nginx
        if [ ! -d /etc/nginx/.git ]; then
            git init &>> /dev/null
        fi
        git add .
        git commit -am "Updated Nginx" > /dev/null
    fi
    # EasyEngine under git version control
    cd /etc/ee
    if [ ! -d /etc/ee/.git ]; then
        git init > /dev/null
    fi
    git add .
    git commit -am "Installed/Updated to EasyEngine 3.x" &>> /dev/null

}

# Update EasyEngine
if [ -f /usr/local/sbin/easyengine ]; then
    # Check old EasyEngine version
    ee version | grep ${ee_version_old} &>> /dev/null
    if [[ $? -ne 0 ]]; then
        ee_lib_echo "EasyEngine $ee_version_old not found on your system" | tee -ai $ee_install_log
        ee_lib_echo "Updating your EasyEngine to $ee_version_old for compability" | tee -ai $ee_install_log
        wget -q https://raw.githubusercontent.com/rtCamp/easyengine/old-stable/bin/update && bash update | tee -ai $ee_install_log
        if [[ $? -ne 0 ]]; then
            ee_lib_echo_fail "Unbale to update EasyEngine to $ee_version_old, exit status = " $?
        fi
    fi
    ee_install_dep | tee -ai $ee_install_log
    ee_sync_db 2&>>1 $EE_INSTALL_LOG
    secure_ee_db | tee -ai $EE_INSTALL_LOG
    ee_install | tee -ai $ee_install_log
    ee_update | tee -ai $ee_install_log
    ee_git_init | tee -ai $ee_install_log
elif [ ! -f /usr/local/bin/ee ]; then
    ee_install_dep | tee -ai $ee_install_log
    ee_install | tee -ai $ee_install_log
    secure_ee_db | tee -ai $EE_INSTALL_LOG
    ee_git_init | tee -ai $ee_install_log

else
    ee -v 2>&1 | grep $ee_version_new &>> /dev/null
    if [[ $? -ne 0 ]];then
        read -p "Update EasyEngine to $ee_version_new (y/n): " ee_ans
        if [ "$ee_ans" = "y" ] || [ "$ee_ans" = "Y" ]; then
            ee_install_dep | tee -ai $ee_install_log
            ee_sync_db 2&>>1 $EE_INSTALL_LOG
            secure_ee_db | tee -ai $EE_INSTALL_LOG
            ee_update_latest | tee -ai $ee_install_log
            ee_install | tee -ai $ee_install_log
            ee_git_init | tee -ai $ee_install_log
            service nginx reload &>> /dev/null
            service php5-fpm restart &>> /dev/null
        fi
    else
        ee_lib_echo_fail "You already have EasyEngine $ee_version_new, exit status = " $? | tee -ai $ee_install_log
    fi
fi
ee sync | tee -ai $EE_INSTALL_LOG
