#!/bin/bash

# Origin:  https://github.com/rtCamp/easyengine Thanks!!!
# Modified by Mermouy at: https://github.com/Mermouy/easyengine
# Just modified few lines to follow debian style
# Hope it works for you, as I'm not really a "coder"...

# This script is free software: you can redistribute it and/or modify
# it under the terms of the MIT License (MIT).

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License (MIT) at (http://opensource.org/licenses/MIT) for
# more details.

# Todo list: grep "TODO:"
# Notes list: grep "NOTE:"

VERSION="1.0.1"
AUTHOR="Mermouy"
# Make Variables Available For Later Use
LOGDIR=/var/log/easyengine
ERRORLOG=/var/log/easyengine/error.log
INSTALLLOG=/var/log/easyengine/install.log

# Where to get WordPress? Commented example is for french edition
LATESTWP="http://wordpress.org/latest.tar.gz"
#LATESTWP="http://fr.wordpress.org/latest-fr_FR.tar.gz"

# Colors:
RED="\033[0;31m"
BLUE="\033[0;34m"
GREEN="\033[1;32m"
WHITE="\033[37m"
ENDCOL="\033[0m"

# Main EasyEngine Function To Log All The Outputs
EasyEngine()
{
# Add TimeStamps In Install Log File
echo &>> $INSTALLLOG
echo &>> $INSTALLLOG
echo -e "$BLUEEasyEngine (ee) Execution Started [$(date)]$ENDCOL" &>> $INSTALLLOG
echo -e "$BLUEEasyEngine (ee) Command: $0 $@$ENDCOL" &>> $INSTALLLOG

# Check apt command to use
grep apt-get-type-aptitude /etc/easyengine/ee.conf | grep -i true &>> /dev/null
if [ $? -eq 0 ]
then
	EEAPTTYPE="aptitude"
else
	EEAPTTYPE="apt-get"
fi

# Check Auto Assume Yes Or No To Apt-Get
grep apt-get-assume-yes /etc/easyengine/ee.conf | grep -i true &>> /dev/null
if [ $? -eq 0 ]
then
	EEAPTGETOPT="-y"
else
	EEAPTGETOPT=""
fi
EEAPTGET="$EEAPTTYPE $EEAPTGETOPT"


# Capture Errors
OwnError()
{
	echo -e "[ `date` ] $RED $@ $ENDCOL" | tee -ai $ERRORLOG
	exit 101
}

# Install Package Functions
#PYTHONSOFTWARE()
#{
#	# Install Python Software Properties
#	echo -e $BLUE"Installing Python Software Properties, Please Wait..."$ENDCOL
#	$EEAPTGET install python-software-properties \
#	|| OwnError "Unable To Install Python Software Properties"
#}

NGINXREPO()
{
	# Add Stable Nginx wheezy repo
	wget -q -nc http://nginx.org/keys/nginx_signing.key || OwnError "Unable to doanload NginX signing key"
	apt-key add nginx_signing.key
	echo -e "# Nginx repo\ndeb http://nginx.org/packages/debian/ wheezy nginx\ndeb-src http://nginx.org/packages/debian/ wheezy nginx" > /etc/apt/sources.list.d/nginx-stable.list
	rm nginx_signing.key
}

PHPREPO()
{
	# Add php dotdeb repo
	if [ ! -f /etc/apt/sources.list.d/dotdeb.list ]
	then
		wget http://www.dotdeb.org/dotdeb.gpg || OwnError "Unable to retrieve dotdeb gpg key"
		apt-key add dotdeb.gpg
		echo -e "## DotDeb Package\ndeb http://packages.dotdeb.org wheezy all\ndeb-src http://packages.dotdeb.org wheezy all" > /etc/apt/sources.list.d/dotdeb.list
		rm dotdeb.gpg
	fi
}

GPGKEY()
{
	# Force GPG KEYS Check
	grep gpg-keys-fix /etc/easyengine/ee.conf | grep -i true &>> /dev/null

	if [ $? -eq 0 ]
	then
		# Fix GPG Key Problems
		echo -e "$BLUE Checking GPG Keys For Brianmercer Nginx Repository, Please Wait...$ENDCOL"
		$EEAPTTYPE update > /dev/null 2> /tmp/keymissing \
		|| OwnError "Unable To Fix GPG Keys For Brianmercer Nginx Repository "

		for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //")
		do
			echo -e "$BLUE Processing key: $key$ENDCOL"
			gpg --keyserver subkeys.pgp.net --recv $key && gpg --export --armor $key | apt-key add -
		done
	fi
}

UPDATEAPT()
{
	# Update The APT Cache
	echo -e "$BLUE Updating APT Cache, Please Wait...$ENDCOL"
	$EEAPTTYPE update &>> $INSTALLLOG || OwnError "Unable To Update APT Cache"
}

INSTALLNGINX()
{
	# Install Nginx
	echo -e "$BLUE Installing Nginx, Please Wait...$ENDCOL"
	$EEAPTGET install nginx-extras || OwnError "Unable To Install Nginx"
}

EEMD5SUM()
{
	SOURCE=$EESOURCE
	DEST=$EEDEST

	for i in $SOURCE/*
	do
        # Get File Name
        EEFILE=$(basename $i)

        SOURCEMD5SUM=$(md5sum $SOURCE/$EEFILE | cut -d' ' -f1)
        DESTMD5SUM=$(md5sum $DEST/$EEFILE 2> /dev/null | cut -d' ' -f1)

        # Check If Destination File Exist
        if [ -z "$DESTMD5SUM" ]
        then
                # Copy Missing Destination Files
                cp -i $SOURCE/$EEFILE $DEST/$EEFILE

        elif [ "$SOURCEMD5SUM" != "$DESTMD5SUM" ]
        then
                # Update Destination On MD5SUM Not Matched
                cp -i $SOURCE/$EEFILE $DEST/$EEFILE
        fi  
	done
}

COMMONNGINX()
{
	# Personal Settings For Nginx
	echo -e "$BLUE Updating Nginx Configuration Files, Please Wait...$ENDCOL"

	grep "Easy Engine" /etc/nginx/nginx.conf &> /dev/null
	if [ $? -ne 0 ]
	then

		# Change Nginx Worker Processes Connections And Gzip
		sed -i "s/# gzip/gzip/" /etc/nginx/nginx.conf
		sed -i "s/worker_connections.*/worker_connections 1024;/" /etc/nginx/nginx.conf
		sed -i "s/worker_processes.*/worker_processes `cat /proc/cpuinfo | grep processor | wc -l`;/" /etc/nginx/nginx.conf

		# Disable Nginx Version Set Custome Headers Variables And Proxy Settings
		sed -i "s/http {/http {\n\t##\n\t# Easy Engine Settings\n\t##\n\n\tserver_tokens off;\n\tadd_header X-Powered-By "EasyEngine";\n\tadd_header rt-Fastcgi-Cache \$upstream_cache_status;\n\n\t# Limit Request\n\tlimit_req_status 403;\n\tlimit_req_zone \$binary_remote_addr zone=one:10m rate=1r\/s;\n\n\t# Proxy Settings\n\t# set_real_ip_from\tproxy-server-ip;\n\t# real_ip_header\tX-Forwarded-For;\n\n\tfastcgi_read_timeout 300;\n\tclient_max_body_size 100m;\n\n\t# SSL Settings\n\tssl_session_cache shared:SSL:10m;\n\tssl_session_timeout 10m;\n\tssl_prefer_server_ciphers on;\n\tssl_ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+RC4:EDH+aRSA:EECDH:RC4:\!aNULL:\!eNULL:\!LOW:\!3DES:\!MD5:\!EXP:\!PSK:\!SRP:\!DSS;\n\n/" /etc/nginx/nginx.conf

		# Set Custom Logs
#		sed -i "s/error_log.*/error_log \/var\/log\/nginx\/error.log;\n\n\tlog_format rt_cache '\$remote_addr \$upstream_response_time \$upstream_cache_status [\$time_local] '\n\t\t'\$http_host \"\$request\" \$status \$body_bytes_sent '\n\t\t'\"\$http_referer\" \"\$http_user_agent\"';/" /etc/nginx/nginx.conf
	fi

	# Check If Directory Exist
	if [ ! -d /etc/nginx/conf.d ]
	then
		mkdir -p /etc/nginx/conf.d || OwnError "Unable To Create /etc/nginx/conf.d"
	fi

	if [ ! -d /etc/nginx/common ]
	then
		mkdir -p /etc/nginx/common || OwnError "Unable To Create /etc/nginx/common"
	fi

	# Update Nginx Configuration Files
	EESOURCE="/usr/share/easyengine/nginx/conf.d"
	EEDEST="/etc/nginx/conf.d"
	EEMD5SUM

	# Update Nginx Common Files
	EESOURCE="/usr/share/easyengine/nginx/common"
	EEDEST="/etc/nginx/common"
	EEMD5SUM
}

INSTALLPHP()
{
	# Install PHP5
	echo -e "$BLUE Installing PHP5, Please Wait...$ENDCOL"
	$EEAPTGET install php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached php5-tidy || OwnError "Unable To Install PHP5"
}

COMMONPHP()
{
	# Personal Settings For PHP
# TODO: Don't want to configure it here as I prefer to have differents config for each vhost
	echo -e "$BLUE Updating PHP Configuration Files, Please Wait...$ENDCOL"

	grep "Easy Engine" /etc/php5/fpm/php.ini &> /dev/null
	if [ $? -ne 0 ]
	then

		# Change PHP Settings
		sed -i "s/\[PHP\]/[PHP]\n; Easy Engine/" /etc/php5/fpm/php.ini
		sed -i "s/expose_php.*/expose_php = Off/" /etc/php5/fpm/php.ini
		sed -i "s/post_max_size.*/post_max_size = 20M/" /etc/php5/fpm/php.ini
		sed -i "s/upload_max_filesize.*/upload_max_filesize = 20M/" /etc/php5/fpm/php.ini
		sed -i "s/max_execution_time.*/max_execution_time = 300/" /etc/php5/fpm/php.ini

		# Enable PHP Status & Ping
		sed -i "s/;ping.path/ping.path/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/;pm.status_path/pm.status_path/" /etc/php5/fpm/pool.d/www.conf

		# Change PHP Pool Settings MAX Servers & Request Terminate Timeout
		sed -i "s/;pm.max_requests/pm.max_requests/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/pm.max_children = 5/pm.max_children = 100/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/pm.start_servers = 2/pm.start_servers = 20/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/pm.min_spare_servers = 1/pm.min_spare_servers = 10/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/pm.max_spare_servers = 3/pm.max_spare_servers = 30/" /etc/php5/fpm/pool.d/www.conf
		sed -i "s/;request_terminate_timeout.*/request_terminate_timeout = 300/" /etc/php5/fpm/pool.d/www.conf
		
		# Change PHP Fastcgi Socket 
		sed -i "s'listen = /var/run/php5-fpm.sock'listen = 127.0.0.1:9000'" /etc/php5/fpm/pool.d/www.conf || OwnError "Unable To Change PHP Fastcgi Socket"
	fi
}

WP-CLI()
{
	# Install WP-CLI
	if [ ! -d /usr/share/easyengine/wp-cli ]
	then
		echo -e "$RED WP-CLI Command Not Found $ENDCOL"
		echo -e "$BLUE Installing WP-CLI, Please Wait... $ENDCOL"
		curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash &>> $INSTALLLOG \
		|| OwnError "Unable To Install WP-CLI."

		# Add WP-CLI Command In PATH Variable
		ln -s /usr/share/easyengine/wp-cli/bin/wp /usr/bin/wp || OwnError "Unable To Create Symbolic Link For WP-CLI Command."

		# Add WP-CLI Auto Completion
		cp -i /usr/share/easyengine/wp-cli/vendor/wp-cli/wp-cli/utils/wp-completion.bash /etc/bash_completion.d/
		source /etc/bash_completion.d/wp-completion.bash
	else
		echo -e "$BLUE Already Installed WP-CLI (/usr/share/easyengine/wp-cli)...$ENDCOL"
	fi
}

# TODO: replace this with MyWebSQL
INSTALLPMA()
{
	# Install PMA/phpMyAdmin
	if [ ! -d /var/www/shared/pma ]
	then
		echo -e "$BLUEInstalling phpMyAdmin, Please Wait...$ENDCOL"

		# Setup PMA/phpMyAdmin
		mkdir -p /var/www/shared/pma/ || OwnError "Unable To Create phpMyAdmin Directory: /var/www/shared/pma/"

		# Download PMA/phpMyAdmin
		wget -cqO /var/www/shared/pma/pma.tar.gz http://dl.cihar.com/phpMyAdmin/master/phpMyAdmin-master-latest.tar.gz \
		|| OwnError "Unable To Download phpMyAdmin."

		# Extract PMA/phpMyAdmin
		tar --strip-components=1 -zxf  /var/www/shared/pma/pma.tar.gz -C /var/www/shared/pma/ \
		|| OwnError "Unable To Extract phpMyAdmin."

		# Remove Unwanted Files
		rm -f /var/www/shared/pma/pma.tar.gz
	else
		echo -e "$BLUE Already Installed phpMyAdmin (/var/www/shared/pma)...$ENDCOL"
	fi
}

MYSQLINSTALLTWEAKS()
{
	# MySQL Password Only Set If MySQL Is Not Installed
	# If MySQL Is Installed Dont Set Wrong Password In ~/.my.cnf
	dpkg -l | grep mysql-server &>> $INSTALLLOG

	if [ $? -ne 0 ]
	then
		# Setting Up MySQL Password
		MYSQLAUTOPASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n1)
		debconf-set-selections <<< "mysql-server mysql-server/root_password password $MYSQLAUTOPASS"
		debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $MYSQLAUTOPASS"

		# Generate ~/.my.cnf
		echo -e "[client]\nuser=root\npassword=$MYSQLAUTOPASS" > ~/.my.cnf
	fi
}

INSTALLMYSQL()
{
	# Setting Up MySQL Password
	MYSQLINSTALLTWEAKS

	# Install MySQL
	echo -e "$BLUEInstalling MySQL, Please Wait...$ENDCOL"
	$EEAPTGET install mysql-server mysqltuner \
	|| OwnError "Unable To Install MySQL."
}

MDBINSTALLTWEAKS()
{
	# Setting MariaDB repo (Debian wheezy version)
	echo -e "$BLUE Adding MariaDB to repo list$ENDCOL"
	echo "deb http://mirrors.linsrv.net/mariadb/repo/5.5/debian wheezy main" > /etc/apt/sources.list.d/mariadb.list 
	gpg --keyserver pgpkeys.mit.edu --recv-key 1bb943db || OwnError "Unable to retrieve mariadb key"
	gpg -a --export 1bb943db | apt-key add - || OwnError "unable to add maradb key to apt"
}

INSTALLMDB()
{
	# Setting Up MariaDB
	# Verify If MariaDB Is Installed
	dpkg -l | grep mariadb-server &>> $INSTALLLOG

	if [ $? -ne 0 ]
	then
		echo -e "$BLUE Installing MariaDB, Please Wait...$ENDCOL"
		MDBINSTALLTWEAKS
		$EEAPTGET install mariadb-server \
		|| OwnError "Unable To Install MariaDB."
	else
		echo -e "$BLUE MariaDB already installed... Skipping installation.$ENDCOL"
	fi
}

POSTFIXINSTALLTWEAKS()
{
	# Setting Up Postfix
	debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
	debconf-set-selections <<< "postfix postfix/mailname string $(hostname -f)"
}

# TODO: What if we don't want to use postfix? Mean keeping exim4...

INSTALLPOSTFIX()
{
	# Setting Up Postfix
	POSTFIXINSTALLTWEAKS

	# Install Postfix
	echo -e "$BLUE Installing Postfix, Please Wait...$ENDCOL"
	$EEAPTGET install postfix || OwnError "Unable To Install Postfix."
}

INSTALLALL()
{
	# Setting Up MySQL & Postfix
	MYSQLINSTALLTWEAKS
	POSTFIXINSTALLTWEAKS

	# Install Nginx PHP5 MySQL Postfix
	echo -e "$BLUE Installing Nginx PHP5 MySQL Postfix, Please Wait...$ENDCOL"
	$EEAPTGET install nginx-custom php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mysql-server mysqltuner postfix \
	|| OwnError "Unable To Install Nginx PHP5 MySQL Postfix."
}

INSTALLALLMDB()
{
	# Setting Up MariaDB
	MARIADBINSTALLTWEAKS
	POSTFIXINSTALLTWEAKS
	
	# Install Nginx, PHP5, MariaDB, postfix
	echo -e "$BLUE Installing Nginx PHP5 MariaDB, Please Wait...$ENDCOL"
	$EEAPTGET install nginx-extras php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mariadb-server postfix\
	|| OwnError "Unable To Install Nginx PHP5 MariaDB."
}

# Remove Package Functions
REMOVENGINX()
{
	# Remove Nginx
	echo -e "$BLUE Removing Nginx, Please Wait...$ENDCOL"
	$EEAPTGET remove nginx-extras nginx-common || OwnError "Unable To Remove Nginx"
}

REMOVEPHP()
{
	# Remove PHP5
	echo -e "$BLUE Removing PHP5, Please Wait...$ENDCOL"
	$EEAPTGET remove php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached || OwnError "Unable To Remove PHP5"
}

REMOVEWPCLI()
{
	# Remove WP-CLI
	echo -e "$BLUE Removing WP-CLI, Please Wait...$ENDCOL"
	rm -rf /usr/share/easyengine/wp-cli /usr/bin/wp /etc/bash_completion.d/wp-completion.bash || OwnError "Unable To Remove WP-CLI"
}

REMOVEPMA()
{
	# Remove PMA/phpMyAdmin
	echo -e "$BLUE Removing phpMyAdmin, Please Wait...$ENDCOL"
	rm -rf /var/www/shared/pma || OwnError "Unable To Remove phpMyAdmin"
}

REMOVEMYSQL()
{
	# Remove MySQL
	echo -e "$BLUE Removing MySQL, Please Wait...$ENDCOL"
	$EEAPTGET remove mysql-server mysqltuner \
	|| OwnError "Unable To Remove MySQL"
}
REMOVEMARIADB()
{
	# Remove MariaDB
	echo -e "$BLUE Removing MariaDB, Please Wait...$ENDCOL"
	$EEAPTGET remove mariadb-server \
	|| OwnError "Unable To Remove MariaDB"
}
REMOVEPOSTFIX()
{
	# Remove Postfix
	echo -e "$BLUE Removing Postfix, Please Wait...$ENDCOL"
	$EEAPTGET remove postfix || OwnError "Unable To Remove Postfix"
}

REMOVEALL()
{
	# Remove Nginx PHP5 MySQL Postfix
	echo -e "$BLUE Removing Nginx PHP5 MySQL Postfix, Please Wait...$ENDCOL"
	$EEAPTGET remove nginx-custom nginx-common php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mysql-server mysqltuner postfix \
	|| OwnError "Unable To Remove Nginx PHP5 MySQL Postfix"
}

REMOVEALLMDB()
{
	# Remove Nginx PHP5 MySQL Postfix
	echo -e "$BLUE Removing Nginx PHP5 MySQL Postfix, Please Wait...$ENDCOL"
	$EEAPTGET remove nginx-custom nginx-common php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mariadb-server postfix \
	|| OwnError "Unable To Remove Nginx PHP5 Mariadb Postfix"
}

AUTOREMOVE()
{
	# Remove Unwanted Packages
	echo -e "$BLUE Removing Unwanted Packages, Please Wait...$ENDCOL"
	$EEAPTGET autoremove || OwnError "Unable To Auto Remove"
}


# Purge Package Functions
PURGENGINX()
{
	# Purge Nginx
	echo -e "$BLUE Purge Nginx, Please Wait...$ENDCOL"
	$EEAPTGET purge nginx-extras nginx-common || OwnError "Unable To Purge Nginx"
}

PURGEPHP()
{
	# Purge PHP5
	echo -e "$BLUE Purge PHP5, Please Wait...$ENDCOL"
	$EEAPTGET purge php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached php5-tidy || OwnError "Unable To Purge PHP5"
}

PURGEMYSQL()
{
	# Purge MySQL
	echo -e "$BLUE Purge MySQL, Please Wait...$ENDCOL"
	$EEAPTGET purge mysql-server mysqltuner \
	|| OwnError "Unable To Purge MySQL"
}

PURGEMARIADB()
{
	# Purge MariaDB
	echo -e "$BLUE Purge MariaDB, Please Wait...$ENDCOL"
	$EEAPTGET purge mariadb-server \
	|| OwnError "Unable To Purge MariaDB"
}
PURGEPOSTFIX()
{
	# Purge Postfix
	echo -e "$BLUE Purge Postfix, Please Wait...$ENDCOL"
	$EEAPTGET purge postfix || OwnError "Unable To Purge Postfix"
}

PURGEALL()
{
	# Purge Nginx PHP5 MySQL Postfix
	echo -e "$BLUE Removing Nginx PHP5 MySQL Postfix, Please Wait...$ENDCOL"
	$EEAPTGET purge nginx-custom nginx-common php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mysql-server mysqltuner postfix \
	|| OwnError "Unable To Purge Nginx PHP5 MySQL Postfix"
}

PURGEALLMDB()
{
	# Purge Nginx PHP5 MySQL Postfix
	echo -e "$BLUE Removing Nginx PHP5 MySQL Postfix, Please Wait...$ENDCOL"
	$EEAPTGET purge nginx-custom nginx-common php5-common php5-mysqlnd php5-xmlrpc \
	php5-curl php5-gd php5-cli php5-fpm php5-imap php5-mcrypt \
	php5-memcache memcached mariadb-server postfix \
	|| OwnError "Unable To Purge Nginx PHP5 MySQL Postfix"
}

# EE GIT Function
EEGITINIT()
{
	# Change Directory
	cd $EEGITDIR || OwnError "Unable To Change Directory $EEGITDIR"

	# Check .git
	if [ ! -d .git ]
	then
		# Initialise Git
		echo -e "$BLUE Initialise Git On $EEGITDIR...$ENDCOL"
		git init &>> $INSTALLLOG || OwnError "Unable To Initialise Git On $EEGITDIR"
	fi

	# Check For Untracked Files
	git status | grep clean
	if [ $? -ne 0 ]
	then
		# Add Files In Git Version Control
		git add . && git commit -am "Initialise Git On $EEGITDIR"  &>> $INSTALLLOG \
		|| OwnError "Unable To Git Commit On $EEGITDIR"
	fi
}

EEGITCOMMIT()
{
	cd $EEGITDIR || OwnError "Unable To Change Directory $EEGITDIR"
	git status | grep --color=auto clean

	if [ $? -ne 0 ]
	then
		# Git Commit Functionality
		echo -e "$BLUE Take $EEGITDIR Configuration In Git Version Control...$ENDCOL"

		# Add Newly Created Files && Commit It
		git add . && git commit -am "$EEGITMESSAGE" &>> $INSTALLLOG \
		|| OwnError "Unable To Git Commits On $EEGITDIR"
	fi
}

MYSQLUSERPASS()
{
	read -p "Enter The MySQL Username [root]: " MYSQLUSER
	# If Enter Is Pressed, Then Use root as MySQL User
	if [[ $MYSQLUSER = "" ]]
	then
		MYSQLUSER=root
	fi

	# Turn Off Echo For Passwords
	stty -echo
	read -p "Enter The MySQL Password: " MYSQLPASS
	stty echo
	echo
}


MYSQLPASSCHECK()
{
	while [ -n $(mysqladmin -h $MYSQLHOST -u $MYSQLUSER -p$MYSQLPASS ping 2> /dev/null | grep alive) &> /dev/null ]
	do
		# Verify MySQL Credentials
		MYSQLUSERPASS
	done
}


# GET Information Function
MYSQLINFO()
{
	# Get The MySQL Username/Password
	read -p "MySQL Host [localhost]: " MYSQLHOST

	# If Enter Is Pressed, Then Use localhost as MySQL Host
	if [[ $MYSQLHOST = "" ]]
	then
		MYSQLHOST=localhost
	fi
	
	if [ -f ~/.my.cnf ]
	then
		MYSQLUSER=$(cat ~/.my.cnf | grep user | cut -d'=' -f2)
		MYSQLPASS=$(cat ~/.my.cnf | grep pass | cut -d'=' -f2)
	else
		# Verify MySQL Credentials
		MYSQLUSERPASS
	fi

	# Verify MySQL Credentials
	MYSQLPASSCHECK

	read -p "Enter The MySQL Database Name [$DOMAIN]: " WPDBNAME

	# If Enter Is Pressed, Then Use $DOMAIN As Database Name
	if [[ $WPDBNAME = "" ]]
	then
		WPDBNAME=$DOMAIN
	fi

	read -p "Enter The MySQL Database Table Prefix [wp_]: " WPDBPREFIX
	
	# Display WPDBPREFIX Valid Characters Warning & Try Again
	while [ $(echo $WPDBPREFIX | grep  '[^[:alnum:] _]') ]
	do
		echo -e "$RED Warning: $BLUE Table Prefix Can Only Contain Numbers, Letters, And Underscores.$ENDCOL"
		# For Proper read Command Output
		stty echo
		read -p "Enter The MySQL Database Table Prefix [wp_]: " WPDBPREFIX
	done

	# If Enter Is Pressed, Then Use wp_ As Database Table Prefix
	if [[ $WPDBPREFIX = "" ]]
	then
		WPDBPREFIX=wp_
	fi

	# Create Database
	mysql -u $MYSQLUSER -p$MYSQLPASS -e "create database \`$WPDBNAME\`" \
	|| OwnError "Unable To Create $WPDBNAME Database"
}

PHPUSERINFO()
{
	# PHP User
	PHPUSER=$(grep ^user /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2 | cut -d' ' -f2) \
	|| OwnError "Unable To Findout PHP Username"
}

SYSTEMINFO()
{
	# Nginx Information
	NGINXVER=$(nginx -v 2>&1 | cut -d':' -f2 | cut -d' ' -f2)
	NGINXUSER=$(grep ^user /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXPROCESSES=$(grep worker_processes /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXCONNECTIONS=$(grep worker_connections /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXKEEPALIVE=$(grep keepalive_timeout /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	FASTCGITIMEOUT=$(grep fastcgi_read_timeout /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	CLIENTMAXBODYSIZE=$(grep client_max_body_size /etc/nginx/nginx.conf | cut -d' ' -f2 | cut -d';' -f1)
	NGINXALLOWEDIPADD=$(grep ^allow /etc/nginx/common/allowed_ip.conf | cut -d' ' -f2 | cut -d';' -f1 | tr '\n' ' ')

	echo -e "$BLUE Nginx ($NGINXVER) Information:\n$ENDCOL"
	echo -e "$BLUE Nginx User:\t\t\t $WHITE$NGINXUSER$ENDCOL"
	echo -e "$BLUE Nginx worker_processes:\t\t $WHITE$NGINXPROCESSES$ENDCOL"
	echo -e "$BLUE Nginx worker_connections:\t $WHITE$NGINXCONNECTIONS$ENDCOL"
	echo -e "$BLUE Nginx keepalive_timeout:\t $WHITE$NGINXKEEPALIVE$ENDCOL"
	echo -e "$BLUE Nginx fastcgi_read_timeout:\t $WHITE$FASTCGITIMEOUT$ENDCOL"
	echo -e "$BLUE Nginx client_max_body_size:\t $WHITE$CLIENTMAXBODYSIZE$ENDCOL"
	echo -e "$BLUE Nginx Allowed IP Address:\t $WHITE$NGINXALLOWEDIPADD$ENDCOL"

	# PHP Information
	# Collect Information From php.ini
	PHPUSERINFO
	PHPVER=$(php -v | head -n1 | cut -d' ' -f2 | cut -d'+' -f1)
	PHPEXPOSE=$(grep ^expose_php /etc/php5/fpm/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPPOSTMAXSIZE=$(grep post_max_size /etc/php5/fpm/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPUPLOADMAXFSIZE=$(grep upload_max_filesize /etc/php5/fpm/php.ini | cut -d'=' -f2 | cut -d' ' -f2)
	PHPMAXEXECUTIONTIME=$(grep max_execution_time /etc/php5/fpm/php.ini | cut -d'=' -f2 | cut -d' ' -f2)

	# Collect Information From www.conf
	PHPPINGPATH=$(grep ^ping.path /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPSTATUSPATH=$(grep ^pm.status_path /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMAXREQUEST=$(grep ^pm.max_requests /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMAXCHILDREN=$(grep ^pm.max_children /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMSTARTSERVERS=$(grep ^pm.start_servers /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMINSPARESERVERS=$(grep ^pm.min_spare_servers /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PMMAXSPARESERVERS=$(grep ^pm.max_spare_servers /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPREQUESTTERMINATE=$(grep ^request_terminate_timeout /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)
	PHPFASTCGIREQUEST=$(grep ^listen /etc/php5/fpm/pool.d/www.conf | cut -d'=' -f2| cut -d' ' -f2)

	echo -e "$BLUE\n\n PHP ($PHPVER) Information:\n$ENDCOL"
	echo -e "$BLUEPHP User:\t\t\t $WHITE$PHPUSER$ENDCOL"
	echo -e "$BLUEPHP expose_php:\t\t\t $WHITE$PHPEXPOSE$ENDCOL"
	echo -e "$BLUEPHP post_max_size:\t\t $WHITE$PHPPOSTMAXSIZE$ENDCOL"
	echo -e "$BLUEPHP upload_max_filesize:\t $WHITE$PHPUPLOADMAXFSIZE$ENDCOL"
	echo -e "$BLUEPHP max_execution_time:\t\t $WHITE$PHPMAXEXECUTIONTIME\n$ENDCOL"

	echo -e "$BLUEPHP ping.path:\t\t\t $WHITE$PHPPINGPATH$ENDCOL"
	echo -e "$BLUEPHP pm.status_path:\t\t $WHITE$PHPSTATUSPATH$ENDCOL"
	echo -e "$BLUEPHP pm.max_requests:\t\t $WHITE$PMMAXREQUEST$ENDCOL"
	echo -e "$BLUEPHP pm.max_children:\t\t $WHITE$PMMAXCHILDREN$ENDCOL"
	echo -e "$BLUEPHP pm.start_servers:\t\t $WHITE$PMSTARTSERVERS$ENDCOL"
	echo -e "$BLUEPHP pm.min_spare_servers:\t $WHITE$PMMINSPARESERVERS$ENDCOL"
	echo -e "$BLUEPHP pm.max_spare_servers:\t $WHITE$PMMAXSPARESERVERS$ENDCOL"
	echo -e "$BLUEPHP request_terminate_timeout:\t $WHITE$PHPREQUESTTERMINATE$ENDCOL"
	echo -e "$BLUEPHP Fastcgi Listen:\t\t $WHITE$PHPFASTCGIREQUEST$ENDCOL"
}

NGINXBUCKETSIZE()
{
	nginx -t 2>&1 | grep server_names_hash_bucket_size
	if [ $? -eq 0 ]
	then
		NGINXCALCULATION=$(echo "l($(ls /etc/nginx/sites-enabled/ | wc -c))/l(2)+2" | bc -l)
		NGINXSETBUCKET=$(echo "2^$NGINXCALCULATION" | bc -l)
		sed -i "s/.*server_names_hash_bucket_size.*/\tserver_names_hash_bucket_size $NGINXSETBUCKET;/" /etc/nginx/nginx.conf		
	fi
}

NGINXRELOAD()
{
	# Check Nginx server_names_hash_bucket_size Value
	NGINXBUCKETSIZE

	# Reload Nginx Configuration
	echo -e "$BLUE Reloading Nginx Configuration, Please Wait...$ENDCOL"
	(nginx -t && service nginx reload) &>> $INSTALLLOG || OwnError "Unable To Reload Nginx"
}

NGINXRESTART()
{
	# Check Nginx server_names_hash_bucket_size Value
	NGINXBUCKETSIZE

	# Test & Reload Nginx
	echo -e "$BLUE Restarting Nginx Configuration, Please Wait...$ENDCOL"
	(nginx -t && service nginx restart) &>> $INSTALLLOG || OwnError "Unable To Restart Nginx"
}

PHPRESTART()
{
	# Reload PHP
	echo -e "$BLUE Restarting PHP5-FPM Configuration, Please Wait...$ENDCOL"
	service php5-fpm restart &>> $INSTALLLOG || OwnError "Unable To Restart PHP5-FPM"
}



# EE Domian Functions
EESITENAME()
{
	# Check SITENAME Is Empty Or Not
	while [ -z "$SITENAMECHECK" ]
	do
		# Ask Users To Enter Domain Name
		read -p "Enter Domain Name: " SITENAMECHECK
		# Remove http://  https:// & www.
		DOMAIN=$(echo $SITENAMECHECK | tr 'A-Z' 'a-z' |  sed "s'http://''" | sed "s'https://''" | sed "s'www.''" | sed "s'/''")
	done
	# Remove http://  https:// & www.
	DOMAIN=$(echo $SITENAMECHECK | tr 'A-Z' 'a-z' |  sed "s'http://''" | sed "s'https://''" | sed "s'www.''" | sed "s'/''")

}

# TODO: replace with ngxensite/dissite?
NGINXSYMBOLICLINK()
{
	# Creating Symbolic Link
	echo -e "$BLUE Creating Symbolic Link For $DOMAIN$ENDCOL"
	ln -s /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/ \
	|| OwnError "Unable To Create Symbolic Link For $DOMAIN"
}

# TODO: replace with create-php-site? 
EEDOMAINSETUP()
{
	#Check The Nginx Configuration Exist For $DOMAIN
	ls /etc/nginx/sites-available/$DOMAIN &> $ERRORLOG

	if [ $? -ne 0 ]
	then
		# Creating Website $DOMAIN
		echo -e "$BLUE Creating $DOMAIN, Please Wait...$ENDCOL"
		sed "s/example.com/$DOMAIN/g" \
		/usr/share/easyengine/nginx/$NGINXCONF \
		> /etc/nginx/sites-available/$DOMAIN \
		|| OwnError "Unable To Create Nginx Configuration File For $DOMAIN"

		# Creating Symbolic Link
		NGINXSYMBOLICLINK

		# Creating Htdocs & Logs Directory
		echo -e "$BLUE Creating htdocs & logs Directory$ENDCOL"
		mkdir -p /var/www/$DOMAIN/htdocs && mkdir -p /var/www/$DOMAIN/logs \
		|| OwnError "Unable To Create htdocs & logs Directory"

		# Creating Symbolic Links For Logs
		echo -e "$BLUE Creating Symbolic Link For Logs$ENDCOL"
		ln -s /var/log/nginx/$DOMAIN.access.log /var/www/$DOMAIN/logs/access.log \
		&& ln -s /var/log/nginx/$DOMAIN.error.log /var/www/$DOMAIN/logs/error.log \
		|| OwnError "Unable To Create Symbolic Link For $DOMAIN Logs"
	else
		OwnError "$DOMAIN Already Exist"
	fi
}

EEWPSETUP()
{
	# Download Latest Wordpress
	echo -e "$BLUE Downloading WordPress, Please Wait...$ENDCOL"
	wget -cO /var/www/$DOMAIN/htdocs/latest.tar.gz  \
	$LATESTWP \
	|| OwnError "Unable To Download WordPress"

	# Extracting Wordpress
	tar --strip-components=1 -zxf /var/www/$DOMAIN/htdocs/latest.tar.gz \
	-C /var/www/$DOMAIN/htdocs/ \
	|| OwnError "Unable To Extract WordPress"

	# Removing Wordpress Archive
	rm /var/www/$DOMAIN/htdocs/latest.tar.gz

	# Call MYSQLINFO Function For MySQL Values
	MYSQLINFO

	# Modify wp-config.php & Move Outside The Webroot
	cp -v /var/www/$DOMAIN/htdocs/wp-config-sample.php \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/database_name_here/$WPDBNAME/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/username_here/$MYSQLUSER/" \
	/var/www/$DOMAIN/wp-config.php
				
	sed -i "s/password_here/$MYSQLPASS/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/localhost/$MYSQLHOST/" \
	/var/www/$DOMAIN/wp-config.php

	sed -i "s/wp_/$WPDBPREFIX/" \
	/var/www/$DOMAIN/wp-config.php

	printf '%s\n' "g/put your unique phrase here/d" \
	a "$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)" . w \
	| ed -s /var/www/$DOMAIN/wp-config.php
}

EEWPDBSETUP()
{
	# Get WordPress Site Title
	echo -e "$BLUE WordPress Information Required...$ENDCOL"
	# For Proper read Command Output
	stty echo
	read -p "Site Title [$DOMAIN]: " SITETITLE

	# If Enter Is Pressed, Then Use admin As WordPress Admin Username
	if [[ $SITETITLE = "" ]]
	then
		SITETITLE=$DOMAIN
	fi

	read -p "Username [admin]: " WPADMINUSER

	# If Enter Is Pressed, Then Use admin As WordPress Admin Username
	if [[ $WPADMINUSER = "" ]]
	then
		WPADMINUSER=admin
	fi

	# Turn Off Echo For Passwords
	stty -echo
	read -p "Password: " WPADMINPASS
	stty echo

	# Cross Check Blank WordPress Admin Password
	while [ -z $WPADMINPASS ]
	do
		echo -e "$RED\nWarning:$BLUE WordPress Admin Password Should Not Blank$ENDCOL"

		# Turn Off Echo For Passwords
		stty -echo
		read -p "Password: " WPADMINPASS
		stty echo
	done

	
	echo
	# For Proper read Command Output
	stty echo
	read -p "Email: " WPADMINEMAIL

	# Cross Check Blank WordPress Admin Email Address
	while [ -z $WPADMINEMAIL ]
	do
		echo -e "$RED Warning:$BLUE WordPress Admin Email Should Not Be Blank$ENDCOL"
		# For Proper read Command Output
		stty echo
		read -p "Email: " WPADMINEMAIL
	done

	# Create WordPress Tables
	echo -e "$BLUE Setting Up WordPress, Please Wait...$ENDCOL"
	cd /var/www/$DOMAIN/htdocs || OwnError "Unable To Change Directory To Install WordPress"
	wp core install --url=$DOMAIN --title="$SITETITLE" \
	--admin_name=$WPADMINUSER --admin_password=$WPADMINPASS --admin_email=$WPADMINEMAIL \
	|| OwnError "Unable To Create WordPress Tables For $DOMAIN"
}

EEPERMISSION()
{
	# Call PHPUSERINFO Function For PHP User Details
	PHPUSERINFO

	# Change Ownership
	echo -e "$BLUE Changing Ownership$ENDCOL"
	chown -R $PHPUSER:$PHPUSER /var/www/$DOMAIN/ || OwnError "Unable To Change Ownership For $DOMAIN"

	# Reload Nginx Configuration
	NGINXRELOAD
}


# NGINX Configuration Function
SETUPDOMAIN()
{
	# Check SITENAME Is Empty Or Not
	EESITENAME

	# Creating Website $DOMAIN
	EEDOMAINSETUP

	# Setup WordPress Webroot & Database
	EEWPSETUP
	EEWPDBSETUP
}

PERMISSIONANDGIT()
{
	# Change Webroot Permission
	EEPERMISSION

	# Take Nginx Configuration In Git Version Control
	EEGITDIR=/etc/nginx
	EEGITMESSAGE="Created New $WPNETWORKSITE $WPCACHEOPTION Website: $DOMAIN"
	EEGITCOMMIT
}

EEOPMEMCACHE()
{
	# Opcache Settings
	if [ ! -d /var/www/shared/opcache ]
	then
		mkdir -p /var/www/shared/opcache || OwnError "Unable To Create Opcache Directory"

		# Download Opcache Status Files
		wget -cO /var/www/shared/opcache/opcache.php https://raw.github.com/rlerdorf/opcache-status/master/opcache.php
		wget -cO /var/www/shared/opcache/opgui.php https://raw.github.com/amnuts/opcache-gui/master/index.php
		wget -cO /var/www/shared/opcache/ocp.php https://gist.github.com/ck-on/4959032/raw/0b871b345fd6cfcd6d2be030c1f33d1ad6a475cb/ocp.php
	fi

	# Memcache Settings
	if [ ! -d /var/www/shared/memcache ]
	then
		mkdir -p /var/www/shared/memcache || OwnError "Unable To Create Memcache Directory"

		# Download phpMemcachedAdmin
		wget -cO /var/www/shared/memcache/memcache.tar.gz http://phpmemcacheadmin.googlecode.com/files/phpMemcachedAdmin-1.2.2-r262.tar.gz

		# Extract phpMemcachedAdmin
		tar -zxf /var/www/shared/memcache/memcache.tar.gz -C /var/www/shared/memcache

		# Remove Unwanted Files
		rm -f /var/www/shared/memcache/memcache.tar.gz
	fi
}

TOTALCACHENGINX()
{
	# Installing W3 Total Cache
	cd /var/www/$DOMAIN/htdocs/
	echo -e "$BLUE Installing W3 Total Cache Plugin, Please Wait...$ENDCOL"
	wp plugin install w3-total-cache || OwnError "Unable To Install W3 Total Cache Plugin"

	# Activate W3 Total Cache
	wp plugin activate w3-total-cache $NETWORKACTIVATE || OwnError "Unable To Activate W3 Total Cache Plugin"

	# Install Opcahe & Memcache
	EEOPMEMCACHE
}

SUPERCACHENGINX()
{
	# Installing WP Super Cache
	cd /var/www/$DOMAIN/htdocs/
	echo -e "$BLUEInstalling WP Super Cache Plugin, Please Wait...$ENDCOL"
	wp plugin install wp-super-cache || OwnError "Unable To Install WP Super Cache Plugin"

	# Activate WP Super Cache
	wp plugin activate wp-super-cache $NETWORKACTIVATE || OwnError "Unable To Activate WP Super Cache Plugin"
}

NGINXHELPER()
{
	# Installing Nginx Helper
	cd /var/www/$DOMAIN/htdocs/
	echo -e "$BLUEInstalling Nginx Helper Plugin, Please Wait...$ENDCOL"
	wp plugin install nginx-helper || OwnError "Unable To Install Nginx Helper"

	# Activate Nginx Helper
	wp plugin activate nginx-helper $NETWORKACTIVATE || OwnError "Unable To Activate Nginx Helper Plugin"
}


# Setup Wordpress Network
SETUPWPNETWORK()
{
	# Prepare wp-config.php File For Wordpress Multisite With SubDirectory
	cd /var/www/$DOMAIN/htdocs || OwnError "Unable To Change Directory"
	wp core install-network --title="$SITETITLE" $WPSUBDOMAINS || OwnError "Unable To Setup WordPress SubDirectory Network"

	sed -i "/WP_DEBUG/a \define('WP_ALLOW_MULTISITE', true);" /var/www/$DOMAIN/wp-config.php
	sed -i "/WP_ALLOW_MULTISITE/a \define('WPMU_ACCEL_REDIRECT', true);" /var/www/$DOMAIN/wp-config.php
	
	# Remove index.php from permalink
	# Install Nginx Helper
	NGINXHELPER
}


# Remove Database
REMOVEDB()
{
	# MySQL Informatiom
	WPDBNAME=$(grep DB_NAME /var/www/$DOMAIN/wp-config.php | cut -d"'" -f4)
	MYSQLUSER=$(grep DB_USER /var/www/$DOMAIN/wp-config.php | cut -d"'" -f4)
	MYSQLPASS=$(grep DB_PASS /var/www/$DOMAIN/wp-config.php | cut -d"'" -f4)
	echo -e " WPDBNAME = $WPDBNAME \n MYSQLUSER = $MYSQLUSER"

	# Remove Database
	# For Proper read Command Output
	stty echo
	read -p "Are You Sure To Drop $WPDBNAME Database (y/n): " ANSWER

	if [ "$ANSWER" = "y" ]
	then
		# Remove Database
		mysql -u $MYSQLUSER -p$MYSQLPASS -e "drop database \`$WPDBNAME\`" \
		|| OwnError "Unable To Drop $WPDBNAME Database"
	else
		# User Denied Messages
		echo -e "$RED User Denied To Drop $WPDBNAME Database.$ENDCOL"
	fi
}

REMOVEFILES()
{
	# Remove Webroot
	# For Proper read Command Output
	stty echo
	read -p "Are You Sure To Remove $DOMAIN Webroot (y/n): " ANSWER

	if [ "$ANSWER" = "y" ]
	then
		# Remove Webroot
		rm -rf /var/www/$DOMAIN	|| OwnError "Unable To Remove $DOMAIN Webroot"
	else
		# User Denied Messages
		echo -e "$RED User Denied To Remove $DOMAIN Webroot.$ENDCOL"
	fi
}

REMOVENGINXCONF()
{
	# Remove Nginx Configuraion
	# For Proper read Command Output
	stty echo
	read -p "Are You Sure To Remove $DOMAIN Nginx Configuraion (y/n): " ANSWER

	if [ "$ANSWER" = "y" ]
	then
		# Remove Webroot
		rm -rf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/$DOMAIN \
		|| OwnError "Unable To Remove $DOMAIN Nginx Configuration"
	else
		# User Denied Messages
		echo -e "$RED User Denied To Remove $DOMAIN Nginx Configuration.$ENDCOL"
	fi
}

# Easy Engine Help
if [ "$1" = "-h" ] || [ "$1" = "help" ] || [ "$1" = "--help" ]
then
	# Display Man Pages
	man ee
	
# Easy Engine Version
elif [ "$1" = "-v" ] || [ "$1" = "version" ] || [ "$1" = "--version" ]
then
	# Display Easy Engine Version
	echo -e "$GREEN EasyeNGine version: $VERSION by: $AUTHOR$ENDCOL"
	
# Easy Engine System Settings
elif [ "$1" = "system" ]
then
	# Easy Engine Install
	if [ "$2" = "install" ]
	then

		if [ "$3" = "nginx" ]
		then
			# Install Python Software Properties
			# NOTE: Really need?
			PYTHONSOFTWARE

			# Add Nginx Repository
			NGINXREPO

			# Fix GPG Key Problems
			GPGKEY

			# Update The APT Cache
			UPDATEAPT			

			# Install Nginx
			INSTALLNGINX

			# Personal Settings For Nginx
			COMMONNGINX

			# Restart Nginx To Take Effect Of COMMONNGINX Functions
			NGINXRESTART

			# Initialise Git
			EEGITDIR=/etc/nginx/
			EEGITINIT
			
			# Display Success Message
			echo -e "$BLUE Nginx Successfully Installed$ENDCOL"

		elif [ "$3" = "php" ]
		then
			# Install Python Software Properties
			# NOTE: Really need?
			PYTHONSOFTWARE

			# Add PHP Repository
			PHPREPO

			# Fix GPG Key Problems
			GPGKEY

			# Update The APT Cache
			UPDATEAPT

			# Install PHP5
			INSTALLPHP

			# Personal Settings For PHP
			COMMONPHP

			# Restart PHP To Take Effect Of COMMONPHP Functions
			PHPRESTART
			
			# Install WP-CLI
			WP-CLI

			# Initialise Git
			EEGITDIR=/etc/php5/
			EEGITINIT

			# Display Success Message
			echo -e "$BLUE PHP5 & WP-CLI Successfully Installed$ENDCOL"

		elif [ "$3" = "pma" ]
		then
			# Install PMA/phpMyAdmin
			# NOTE: MyWebSQL?
			INSTALLPMA

			# Initialise Git
			EEGITDIR=/var/www/shared/pma/
			EEGITINIT

			# Display Success Message
			echo -e "$BLUE phpMyAdmin Successfully Installed$ENDCOL"

		elif [ "$3" = "mysql" ]
		then
			# Update The APT Cache
			UPDATEAPT

			# Install MySQL
			INSTALLMYSQL

			# Initialise Git
			EEGITDIR=/etc/mysql/
			EEGITINIT
			
			# Display Success Message
			echo -e "$BLUE MySQL Successfully Installed$ENDCOL"
			
		elif [ "$3" = "mdb" ]
		then
			# Update The APT Cache
			UPDATEAPT

			# Install MySQL
			INSTALLMDB

			# Initialise Git
			EEGITDIR=/etc/mysql/
			EEGITINIT
			
			# Display Success Message
			echo -e "$BLUE Mariadb Successfully Installed$ENDCOL"

		elif [ "$3" = "postfix" ]
		then
			# Update The APT Cache
			UPDATEAPT
			
			# Install Postfix
			INSTALLPOSTFIX

			# Initialise Git
			EEGITDIR=/etc/postfix/
			EEGITINIT
			
			# Display Success Message
			echo -e "$BLUE Postfix Successfully Installed$ENDCOL"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then
			
			# Install Python Software Properties
			PYTHONSOFTWARE

          		# Add Nginx Repository
			NGINXREPO
			
			# Add PHP Repository
			PHPREPO

			# Fix GPG Key Problems
			GPGKEY

			# Update The APT Cache
			UPDATEAPT

			# Install Nginx PHP5 MySQL Postfix
			INSTALLALL

			# Personal Settings For Nginx
			COMMONNGINX

			# Reload Nginx To Take Effect Of COMMONNGINX Functions
			NGINXRESTART

			# Personal Settings For PHP
			COMMONPHP

			# Restart PHP To Take Effect Of COMMONPHP Functions
			PHPRESTART

			# Install WP-CLI
			WP-CLI

			# Install PMA/phpMyAdmin
			INSTALLPMA

			# Initialise Git
			EEGITDIR=/etc/nginx/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/php5/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/mysql/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/var/www/shared/pma/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/postfix/
			EEGITINIT

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MySQL Postfix phpMyAdmin Successfully Installed$ENDCOL"
			echo -e "$BLUE You Can Now Create Your First WordPress Site Powered By Nginx Using:$ENDCOL"
			echo -e "$WHITE ee site create wp basic $(hostname -f)$ENDCOL"
		
		elif [ "$3" = "allmdb" ] || [ "$3" = "" ]
		then
          		# Add Nginx Repository
			NGINXREPO
			
			# Add PHP Repository
			PHPREPO

			# Fix GPG Key Problems
			GPGKEY

			# Update The APT Cache
			UPDATEAPT

			# Install Nginx PHP5 MySQL Postfix
			INSTALLALLMDB

			# Personal Settings For Nginx
			COMMONNGINX

			# Reload Nginx To Take Effect Of COMMONNGINX Functions
			NGINXRESTART

			# Personal Settings For PHP
			COMMONPHP

			# Restart PHP To Take Effect Of COMMONPHP Functions
			PHPRESTART

			# Install WP-CLI
			WP-CLI

			# Install PMA/phpMyAdmin
			INSTALLPMA

			# Initialise Git
			EEGITDIR=/etc/nginx/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/php5/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/mysql/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/var/www/shared/pma/
			EEGITINIT

			# Initialise Git
			EEGITDIR=/etc/postfix/
			EEGITINIT

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MariaDB Postfix phpMyAdmin Successfully Installed$ENDCOL"
			echo -e "$BLUE You Can Now Create Your First WordPress Site Powered By Nginx Using:$ENDCOL"
			echo -e "$WHITE ee site create wp basic $(hostname -f)$ENDCOL"
		fi

	# Easy Engine Remove
	elif [ "$2" = "remove" ]
	then
		if [ "$3" = "nginx" ]
		then
			# Remove Nginx
			REMOVENGINX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "$BLUE Nginx Successfully Removed$ENDCOL"

		elif [ "$3" = "php" ]
		then

			# Remove PHP5
			REMOVEPHP
			REMOVEWPCLI
			
			# Remove Unwanted Packages
			AUTOREMOVE
						
			# Display Success Message
			echo -e "$BLUE PHP5 & WP-CLI Successfully Removed$ENDCOL"

		elif [ "$3" = "pma" ]
		then
			# Remove PMA/phpMyAdmin
			REMOVEPMA
			
			# Display Success Message
			echo -e "$BLUE phpMyAdmin Successfully Removed$ENDCOL"

		elif [ "$3" = "mysql" ]
		then
			# Remove MySQL
			REMOVEMYSQL
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "$BLUE MySQL Successfully Removed$ENDCOL"
			
		elif [ "$3" = "mariadb" ]
		then
			# Remove MySQL
			REMOVEMDB
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "$BLUE MariaDB Successfully Removed$ENDCOL"

		elif [ "$3" = "postfix" ]
		then
			# Remove Postfix
			REMOVEPOSTFIX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "$BLUE Postfix Successfully Removed$ENDCOL"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then
			# Remove Nginx PHP5 MySQL Postfix
			REMOVEALL
			
			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MySQL Postfix phpMyAdmin Successfully Removed$ENDCOL"
			
		elif [ "$3" = "allmdb" ] || [ "$3" = "" ]
		then
			# Remove Nginx PHP5 MySQL Postfix
			REMOVEALL
			
			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MariaDB Postfix phpMyAdmin Successfully Removed$ENDCOL"
		fi

	# Easy Engine Purge
	elif [ "$2" = "purge" ]
	then
		
		if [ "$3" = "nginx" ]
		then
			# Purge Nginx
			PURGENGINX
			
			# Remove Unwanted Packages
			AUTOREMOVE
			
			# Display Success Message
			echo -e "$BLUE Nginx Successfully Purged$ENDCOL"

		elif [ "$3" = "php" ]
		then
			# Purge PHP5
			PURGEPHP
			REMOVEWPCLI
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "$BLUE PHP5 & WP-CLI Successfully Purged$ENDCOL"

		elif [ "$3" = "pma" ]
		then
			# Purge PMA/phpMyAdmin
			REMOVEPMA
			
			# Display Success Message
			echo -e "$BLUE phpMyAdmin Successfully Purged$ENDCOL"

		elif [ "$3" = "mysql" ]
		then
			# Purge MySQL
			PURGEMYSQL
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "$BLUE MySQL Successfully Purged$ENDCOL"
		
		elif [ "$3" = "mariadb" ]
		then
			# Purge MySQL
			PURGEMDB
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "$BLUE MariaDB Successfully Purged$ENDCOL"

		elif [ "$3" = "postfix" ]
		then
			# Purge Postfix
			PURGEPOSTFIX
			
			# Remove Unwanted Packages
			AUTOREMOVE

			# Display Success Message
			echo -e "$BLUE Postfix Successfully Purged$ENDCOL"

		elif [ "$3" = "all" ] || [ "$3" = "" ]
		then
			# Purge Nginx PHP5 MySQL Postfix
			PURGEALL

			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MySQL Postfix phpMyAdmin Successfully Purged$ENDCOL"
		elif [ "$3" = "allmdb" ] || [ "$3" = "" ]
		then
			# Purge Nginx PHP5 MySQL Postfix
			PURGEALLMDB

			# Remove Unwanted Packages
			AUTOREMOVE
			REMOVEWPCLI
			REMOVEPMA

			# Display Success Message
			echo -e "$BLUE Nginx PHP5 WP-CLI MariaDB Postfix phpMyAdmin Successfully Purged$ENDCOL"
		fi

	# Easy Engine Info
	elif [ "$2" = "info" ]
	then
		# Get Nginx PHP & MySQL Information
		SYSTEMINFO
	fi
	
# Easy Engine Site Settings
elif [ "$1" = "site" ]
then
	# Easy Engine Site Enabled List
	if [ "$2" = "list" ]
	then
		# Display The List Of Enabled Websites
		echo -e "$BLUE Display The List Of Enabled Websites:$ENDCOL"
		ls /etc/nginx/sites-enabled/ \
		|| OwnError "Unable To Display The List Of Enabled Websites"

	elif [ "$2" = "listall" ]
	then

		# Display The List Of Available Sites
		echo -e "$BLUE Display The List Of Available Websites:$ENDCOL"
		ls /etc/nginx/sites-available/ \
		|| OwnError "Unable To Display The List Of Available Websites"

	elif [ "$2" = "show" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME
		
		# Check If Website Exist
		ls /etc/nginx/sites-available/$DOMAIN &> /dev/null \
		|| OwnError "The $DOMAIN Is Not Found In Available Websites List"

		if [ $? -eq 0 ]
		then
			# Display The Specific Site Configuration
			echo -e "$BLUE Display Nginx Configuration For $DOMAIN$ENDCOL"
			cat /etc/nginx/sites-available/$DOMAIN \
			|| OwnError "Unable To Display Nginx Configuration For $DOMAIN"

		fi

	elif [ "$2" = "create" ]
	then
		EEGITMESSAGE="Created New $3 Website: $DOMAIN"
		if [ "$3" = "html" ]
		then
			# Check SITENAME Is Empty Or Not
			SITENAMECHECK=$4
			EESITENAME

			# Creating Website $DOMAIN
			NGINXCONF=html/basic.conf
			EEDOMAINSETUP
			EEPERMISSION

			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITCOMMIT

			# Display Success Message
			echo -e "$BLUE http://$DOMAIN Domain Successfully Created$ENDCOL"

		elif [ "$3" = "php" ]
		then
			# Check SITENAME Is Empty Or Not
			SITENAMECHECK=$4
			EESITENAME

			# Creating Website $DOMAIN
			NGINXCONF=php/basic.conf
			EEDOMAINSETUP
			EEPERMISSION

			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITCOMMIT

			# Display Success Message
			echo -e "$BLUE http://$DOMAIN Domain Successfully Created$ENDCOL"

		elif [ "$3" = "wp" ]
		then
			if [ "$4" = "basic" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/basic.conf
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Basic Nginx
				SETUPDOMAIN
				NGINXHELPER
				PERMISSIONANDGIT

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "w3tc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/w3tc.conf
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup W3 Total Cahe Nginx
				SETUPDOMAIN
				NGINXHELPER
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "wpsc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpsc.conf
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup WP Super Cahe Nginx
				SETUPDOMAIN
				NGINXHELPER
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE WP Super Cache: http://$DOMAIN/wp-admin/options-general.php?page=wpsupercache$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"
				
			elif [ "$4" = "wpfc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpfc.conf
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Fastcgi Cahe Nginx
				SETUPDOMAIN
				NGINXHELPER
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE Nginx Helper: http://$DOMAIN/wp-admin/options-general.php?page=nginx$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"
			fi

		elif [ "$3" = "wpsubdir" ]
		then
			if [ "$4" = "basic" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/basic.conf
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN
				
				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "w3tc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/w3tc.conf
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "wpsc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpsc.conf
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE WP Super Cache: http://$DOMAIN/wp-admin/network/settings.php?page=wpsupercache$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "wpfc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpfc.conf
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE Nginx Helper: http://$DOMAIN/wp-admin/network/settings.php?page=nginx$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"
			fi
		elif [ "$3" = "wpsubdomain" ]
		then
			if [ "$4" = "basic" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/basic.conf
				WPSUBDOMAINS="--subdomains"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN
				
				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "w3tc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/w3tc.conf
				WPSUBDOMAINS="--subdomains"
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "wpsc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpsc.conf
				WPSUBDOMAINS="--subdomains"
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				SUPERCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE WP Super Cache: http://$DOMAIN/wp-admin/network/settings.php?page=wpsupercache$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			elif [ "$4" = "wpfc" ]
			then
				# Congigure Variable
				WPNETWORKSITE=$3
				WPCACHEOPTION=$4
				SITENAMECHECK=$5
				NGINXCONF=$3/wpfc.conf
				WPSUBDOMAINS="--subdomains"
				NETWORKACTIVATE="--network"
				echo -e " WPNETWORKSITE = $WPNETWORKSITE \n WPCACHEOPTION = $WPCACHEOPTION \n SITENAMECHECK = $SITENAMECHECK \n NGINXCONF = $NGINXCONF \n WPSUBDOMAINS = $WPSUBDOMAINS \n NETWORKACTIVATE = $NETWORKACTIVATE"

				# Setup Domain WordPress & Database
				SETUPDOMAIN

				# Setup WordPress SubDirectory Network
				SETUPWPNETWORK
				TOTALCACHENGINX
				PERMISSIONANDGIT

				# Setup phpMyAdmin
				ln -s /var/www/shared /var/www/$DOMAIN/htdocs/ee

				# Display WordPress Plugin Configuration Message
				echo
				echo -e "$BLUE Please Configure The Following Settings...$ENDCOL"
				echo -e "$BLUE Permalink Settings: http://$DOMAIN/wp-admin/options-permalink.php$ENDCOL"
				echo -e "$BLUE Nginx Helper: http://$DOMAIN/wp-admin/network/settings.php?page=nginx$ENDCOL"
				echo -e "$BLUE W3 Total Cache: http://$DOMAIN/wp-admin/network/admin.php?page=w3tc_general$ENDCOL"

				# Display Success Message
				echo
				echo -e "$BLUE Successfully Created New $3 $4 Website: http://$DOMAIN$ENDCOL"

			fi
		fi

	elif [ "$2" = "enable" ]
	then
		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME

		# Creating Symbolic Link
		NGINXSYMBOLICLINK

		# Reload Nginx Configuration
		NGINXRELOAD

		# Take Nginx Configuration In Git Version Control
		EEGITDIR=/etc/nginx
		EEGITMESSAGE="Enable Website: $DOMAIN"
		EEGITCOMMIT

	elif [ "$2" = "disable" ]
	then
		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$3
		EESITENAME

		# Remove Symbolic Link
		echo -e "$BLUERemoving Symbolic Link For $DOMAIN$ENDCOL"
		rm /etc/nginx/sites-enabled/$DOMAIN \
		|| OwnError "Unable To Remove Symbolic Link For $DOMAIN"

		# Reload Nginx Configuration
		NGINXRELOAD

		# Take Nginx Configuration In Git Version Control
		EEGITDIR=/etc/nginx
		EEGITMESSAGE="Disable Website: $DOMAIN"
		EEGITCOMMIT

	elif [ "$2" = "delete" ]
	then

		# Check SITENAME Is Empty Or Not
		SITENAMECHECK=$4
		EESITENAME

		if [ "$3" = "db" ]
		then
			# Remove Database
			REMOVEDB
		elif [ "$3" = "files" ]
		then
			# Remove Webroot
			REMOVEFILES
		elif [ "$3" = "all" ]
		then
			# Remove All Database And Webroot
			REMOVEDB
			REMOVEFILES

			# Remove Nginx Configuraion
			REMOVENGINXCONF

			# Reload Nginx
			NGINXRELOAD

			# Take Nginx Configuration In Git Version Control
			EEGITDIR=/etc/nginx
			EEGITMESSAGE="Delete Website with $3 Option: $DOMAIN"
			EEGITCOMMIT
		fi
	fi
fi
}

EasyEngine $@ | tee -ai $INSTALLLOG
